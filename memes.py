import telebot
import sqlite3
import const
from fuzzywuzzy import fuzz
from telebot import types

def listener(messages):
    for m in messages:
        if m.content_type == 'text':
            print(str(m.chat.first_name) + " [" + str(m.chat.id) + "]: " + m.text)


bot = telebot.TeleBot(const.API_TOKEN)
# bot.set_update_listener(listener)
# connection = sqlite3.connect('memes.db')
# cursor = connection.cursor()


class User:
    def __init__(self):
        self.name = None
        self.email = None
        self.phone_num = None
        self.country = None

    def __repr__(self):
        return str(self.__dict__)


user_data = {}


def selelect_user_info(user_id):
    connect = sqlite3.connect('memes.db')
    cursor = connect.cursor()
    user_info = cursor.execute("SELECT * FROM customers WHERE id_customer = :0", {'0': user_id}).fetchone()
    connect.close()
    return user_info


@bot.message_handler(func=lambda msg: True if not selelect_user_info(msg.chat.id) else False)
def send_welcome(message):
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! üòä –ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –í–∞—à–µ –∏–º—è?')
    bot.register_next_step_handler(message, register_user_name_message)


def register_user_name_message(message):
    user = User()
    user.name = message.text
    user_data[message.chat.id] = user
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à—É –ø–æ—á—Ç—É ‚úâÔ∏è:")
    bot.register_next_step_handler(message, register_user_email_message)


def register_user_email_message(message):
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—á—Ç—ã
    user = user_data[message.chat.id]
    user.email = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû:")
    bot.register_next_step_handler(message, register_user_phone_num_message)


def register_user_phone_num_message(message):
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user = user_data[message.chat.id]
    user.phone_num = message.text.replace("+", "")

    connect = sqlite3.connect('memes.db')
    cursor = connect.cursor()
    cursor.execute("INSERT INTO customers VALUES (:0, :1, :2, :3, :4, :5)", {'0': message.chat.id, '1': user.name, '2': user.phone_num, '3': user.email, '4': None, '5': None})
    connect.commit()
    connect.close()

    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üíª")
    hello(message)

@bot.message_handler(commands=['start', 'help'])
def hello(message):
    user_name = selelect_user_info(message.chat.id)[1]
    bot.send_message(message.chat.id, f'–ü—Ä–∏—è—Ç–Ω–æ —Å –í–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, {user_name} '
                                      ' –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç MEMES üëª –º–∞–≥–∞–∑–∏–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–≥—Ä üéÆ')
    choose_country = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    kz = types.InlineKeyboardButton(text='–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω üá∞üáø', callback_data='kz')
    ru = types.InlineKeyboardButton(text='–†–æ—Å—Å–∏—è üá∑üá∫', callback_data='ru')
    usa = types.InlineKeyboardButton(text='–ë–µ–ª–∞—Ä—É—Å—å üáßüáæ', callback_data='by')
    choose_country.add(kz, ru, usa)
    bot.send_message(message.chat.id,
                     "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! üìå –ú—ã –ø—Ä–æ–¥–∞–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –≤ —Å—Ç—Ä–∞–Ω–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É: ",
                     reply_markup=choose_country)
    bot.register_next_step_handler(message, ask_user_country)

def ask_user_country(message):
    print(message.text)
    countries = ["–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω üá∞üáø",
                 "–†–æ—Å—Å–∏—è üá∑üá∫",
                 "–ë–µ–ª–∞—Ä—É—Å—å üáßüáæ"]
    if message.text in countries:
        connect = sqlite3.connect('memes.db')
        cursor = connect.cursor()
        cursor.execute("UPDATE customers set country =:country WHERE id_customer =:id", {"country":message.text,"id":message.chat.id})
        connect.commit()
        connect.close()
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ")
        bot.register_next_step_handler(message, ask_user_age)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–æ–¥–∞–∂—É –∏–≥—Ä –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö, –∫—Ä–æ–º–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –†–æ—Å—Å—Å–∏–∏ –∏ –ë–µ–ª–∞—Ä—É—Å—å")
def ask_user_age(message):
    if message.text.isnumeric() and 18<= int(message.text) <=100:
        connect = sqlite3.connect('memes.db')
        cursor = connect.cursor()
        cursor.execute("UPDATE customers set age =:age WHERE id_customer =:id", {"age":message.text,"id": message.chat.id})
        connect.commit()
        connect.close()
        bot.send_message(message.chat.id,"–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõç", reply_markup=markup_menu)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ –ø—Ä–æ–¥–∞–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã –ª–∏—Ü–∞–º, –º–ª–∞–¥—à–µ 18 –ª–µ—Ç üìå")
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ")
    print(message.text)


choose_country = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
markup_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
btn_1 = types.KeyboardButton('üéÆ –ö–∞—Ç–∞–ª–æ–≥')
btn_2 = types.KeyboardButton('üëæ –û –Ω–∞—Å')
btn_3 = types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞')
btn_4 = types.KeyboardButton('üí≥ üí∏ –û–ø–ª–∞—Ç–∏—Ç—å')
btn_5 = types.KeyboardButton('üëª –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç')
markup_menu.add(btn_1, btn_2, btn_3, btn_4, btn_5)


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.text == "üëæ –û –Ω–∞—Å":
        onas = types.InlineKeyboardMarkup(row_width=1)
        contacts = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")
        url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram",
                                                url="https://www.instagram.com/memes_company___/")
        onas.add(url_button, contacts)
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=onas)
    elif message.text == "üí≥ üí∏ –û–ø–ª–∞—Ç–∏—Ç—å":
        # money = types.InlineKeyboardMarkup(row_width=1)
        # card = types.InlineKeyboardButton(text="üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—Å—á–µ—Ç", callback_data="card")
        # perevod = types.InlineKeyboardButton(text="üí∏ –ü–µ—Ä–µ–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π", callback_data="perevod")
        # money.add(card, perevod)
        # bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=money)
        connect = sqlite3.connect('memes.db')
        cursor = connect.cursor()
        data = cursor.execute(
            "SELECT COUNT(*), SUM (game.price) FROM basket INNER JOIN game ON basket.id_game= game.id_game WHERE id_customer=:id_customer ",
            {'id_customer': message.chat.id}).fetchone()
        cursor.execute("INSERT INTO purchases (id_customer,id_game) SELECT id_customer,id_game FROM basket WHERE id_customer=:id_customer ",  {'id_customer': message.chat.id})
        cursor.execute("DELETE FROM basket WHERE id_customer=:id_customer", {'id_customer': message.chat.id})
        connect.commit()
        connect.close()
        bot.send_message(message.chat.id, f"–û–ø–ª–∞—á–µ–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {data[0]}, –∏—Ç–æ–≥: {data[1]} $")
    elif message.text == "üëª –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç":
        cite = types.InlineKeyboardMarkup(row_width=1)
        url_b = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                                                url="http://memes_shop2.tilda.ws/")
        cite.add(url_b)
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=cite)

    elif message.text == "üéÆ –ö–∞—Ç–∞–ª–æ–≥":
        catalog = types.InlineKeyboardMarkup(row_width=1)
        card = types.InlineKeyboardButton(text="üé≤ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã", callback_data="name")
        all_games = types.InlineKeyboardButton(text="ü§ñ –í—Å–µ –∏–≥—Ä—ã", callback_data="all_games")
        catalog.add(card)
        catalog.add(all_games)
        bot.reply_to(message, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=catalog)

    elif message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        connect = sqlite3.connect('memes.db')
        cursor = connect.cursor()
        games = cursor.execute("SELECT*FROM basket INNER JOIN game on basket.id_game = game.id_game WHERE id_customer=:id_customer ", {'id_customer': message.chat.id}).fetchall()
        connect.commit()
        connect.close()
        if games:
            for game in games:
                message_text = [
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: {game[4]}",
                    f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: {game[5]}",
                    f"–ñ–∞–Ω—Ä: {game_genre(game[2])}",
                    f"–¶–µ–Ω–∞ –∏–≥—Ä—ã: {game[6]} $"
                ]
                bot.send_message(message.chat.id, "\n".join(message_text))
        else:
            bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        bot.reply_to(message, message.text, reply_markup=markup_menu)



@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.message:
        if call.data == 'contact':
            bot.send_message(call.message.chat.id, '–ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +375(44)-580-25-06 ‚òé')
        if call.data == 'name':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã üé≤')
            bot.register_next_step_handler(call.message, process_game_name_step)
        if call.data.startswith("add_game_to_basket_"):
            game_id = call.data.replace("add_game_to_basket_", "")
            connect = sqlite3.connect('memes.db')
            cursor = connect.cursor()
            cursor.execute("INSERT INTO basket (id_customer, id_game) VALUES (:id_customer,:id_game)",
                           {"id_customer": call.from_user.id, "id_game": game_id})
            connect.commit()
            connect.close()
            bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ")
        if call.data.startswith("show_game_info_"):
            game_id = call.data.replace("show_game_info_", "")
            connect = sqlite3.connect('memes.db')
            cursor = connect.cursor()
            game = cursor.execute("SELECT * from game WHERE id_game = :0", {'0': game_id}).fetchone()
            game_info_message(call.message, game, "msg_edit")
            connect.close()
        if call.data == "all_games":
            connect = sqlite3.connect('memes.db')
            cursor = connect.cursor()
            all_games = cursor.execute("SELECT * from game").fetchall()
            keyboard = types.InlineKeyboardMarkup()
            for game in all_games:
                game_btn = types.InlineKeyboardButton(game[1], callback_data="show_game_info_" + str(game[0]))
                keyboard.add(game_btn)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='ü§ñ –í—Å–µ –∏–≥—Ä—ã!', reply_markup=keyboard)
            connect.close()


def process_game_name_step(message):
    game_name = message.text
    connect = sqlite3.connect('memes.db')
    cursor = connect.cursor()
    search_result = cursor.execute("SELECT * from game").fetchall()
    for game in search_result:
        if fuzz.WRatio(game[1], game_name) >= 85:
            game_info_message(message, game)
            break
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ—é, —Ç–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å üòî")
    connect.close()


def game_info_message(message, game, msg_type="answer"):
    keyboard = types.InlineKeyboardMarkup()
    buy_game_btn = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_game_to_basket_" + str(game[0]))
    keyboard.add(buy_game_btn)
    message_text = [
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: {game[1]}",
        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: {game[2]}",
        f"–ñ–∞–Ω—Ä: {game_genre(game[0])}",
        f"–¶–µ–Ω–∞ –∏–≥—Ä—ã: {game[3]}$"
    ]
    if msg_type == "answer":
        bot.send_message(message.chat.id, '\n'.join(message_text), reply_markup=keyboard)
    elif msg_type == "msg_edit":
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text='\n'.join(message_text), reply_markup=keyboard)


def game_genre(game_id):
    game_genres_list = []
    connect = sqlite3.connect('memes.db')
    cursor = connect.cursor()
    game_genres = cursor.execute("SELECT * FROM game_zhanr WHERE id_game = :0", {'0': game_id}).fetchall()
    for game in game_genres:
        zhanr = cursor.execute("SELECT * FROM zhanr WHERE id_zhanr = :0", {'0': game[1]}).fetchone()
        game_genres_list.append(zhanr[1])
    connect.close()
    return ', '.join(game_genres_list)

def add_game_to_basket_message(message, game_id):
    print(game_id)

bot.polling(none_stop=True)
